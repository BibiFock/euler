<?php

namespace EulerProject\Command;

use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputOption;
use Symfony\Component\Console\Formatter\OutputFormatterStyle;

class Problem12Command extends IndexCommand
{

    protected function init()
    {
        $this->help = <<<EOF
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
EOF;
        $this->definition = array(
            new InputOption(
                'limit',
                'l',
                InputOption::VALUE_OPTIONAL,
                'Number of divisors to find',
                5
            )
        );
        parent::init();
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        parent::execute($input, $output);
        $limit = intval($input->getOption('limit'));

        $this->findTriangleDivisor($limit, $output);
        $output->writeln( "(".($this->getDuration())."s) ----");
    }


    public function findTriangleDivisor($limit, $output)
    {
        $sum = $it = 1;
        $biggestResult = 0;
        do {
            $sum += ++$it;
            $result = $this->getNbDivisor($sum);
            if (count($result) > $biggestResult) {
                $biggestResult = count($result);
            }
        } while (count($result) < $limit);

        $output->writeln("-------------------");
        $output->writeln(
            $sum . " (". count($result)
            . ") -> " . implode(', ',$result)
        );

        return $sum;
    }
}
